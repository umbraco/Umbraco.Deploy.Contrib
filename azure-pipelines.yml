trigger:
  branches:
    exclude:
    - 'v2/*'
    - 'v3/*'
    - 'v4/*'
  tags:
    exclude:
    - release-2.*
    - release-3.*
    - release-4.*

pr:
  branches:
    exclude:
    - 'v2/*'
    - 'v3/*'
    - 'v4/*'

parameters:
  - name: cache_nuget
    displayName: Cache NuGet packages
    type: boolean
    default: false # As long as we're overwriting versions on MyGet, we can't cache NuGet packages by default
  - name: release_myget
    displayName: Release to pre-release/nightly MyGet feed
    type: boolean
    default: false
  - name: release_myget_nightly
    displayName: Release to nightly MyGet feed (instead of pre-release)
    type: boolean
    default: false
  - name: release_nuget
    displayName: Release to public NuGet feed
    type: boolean
    default: false

variables:
  solution: Umbraco.Deploy.Contrib.sln
  buildConfiguration: Release
  DOTNET_NOLOGO: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

stages:
  - stage: Build
    variables:
      NUGET_PACKAGES: $(Pipeline.Workspace)/.nuget/packages
    jobs:
      - job: Build
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Checkout source (avoid shallow clone to calculate version height)
          - checkout: self
            fetchDepth: 0

          # Setup build environment
          - task: UseDotNet@2
            displayName: Use .NET SDK from global.json
            inputs:
              useGlobalJson: true

          # Cache and restore NuGet packages
          - task: Cache@2
            condition: ${{ parameters.cache_nuget }}
            displayName: Cache NuGet packages
            inputs:
              key: 'nuget | "$(Agent.OS)" | **/packages.lock.json, !**/bin/**, !**/obj/**'
              restoreKeys: |
                nuget | "$(Agent.OS)"
                nuget
              path: $(NUGET_PACKAGES)

          - script: dotnet restore $(solution) --locked-mode
            displayName: Restore NuGet packages

          # Build
          - script: dotnet build $(solution) --configuration $(buildConfiguration) --no-restore -p:ContinuousIntegrationBuild=true
            displayName: Run dotnet build
            name: build

          # Pack
          - script: dotnet pack $(solution) --configuration $(buildConfiguration) --no-build --output $(Build.ArtifactStagingDirectory)/nupkg
            displayName: Run dotnet pack

          # Publish
          - task: PublishPipelineArtifact@1
            displayName: Publish NuGet packages
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)/nupkg
              artifactName: nupkg

          - task: PublishPipelineArtifact@1
            displayName: Publish build output
            inputs:
              targetPath: $(Build.SourcesDirectory)
              artifactName: build_output

  - stage: Test
    dependsOn: Build
    jobs:
      - job: UnitTests
        displayName: Unit Tests
        strategy:
          matrix:
            Windows:
              vmImage: 'windows-latest'
            Linux:
              vmImage: 'ubuntu-latest'
            macOS:
              vmImage: 'macos-latest'
        pool:
          vmImage: $(vmImage)
        steps:
          # Setup test environment
          - task: DownloadPipelineArtifact@2
            displayName: Download build artifacts
            inputs:
              artifact: build_output
              path: $(Build.SourcesDirectory)

          - task: UseDotNet@2
            displayName: Use .NET SDK from global.json
            inputs:
              useGlobalJson: true

          # Test
          - script: dotnet test $(solution) --configuration $(buildConfiguration) --no-build --logger trx --results-directory $(Build.ArtifactStagingDirectory)/tests
            displayName: Run dotnet test

          # Publish
          - task: PublishTestResults@2
            displayName: Publish test results
            condition: succeededOrFailed()
            inputs:
              testResultsFormat: VSTest
              testResultsFiles: '*.trx'
              searchFolder: $(Build.ArtifactStagingDirectory)/tests
              testRunTitle: Unit Tests - $(Agent.OS)
              configuration: $(buildConfiguration)

  - stage: ReleaseMyGet
    displayName: MyGet release
    dependsOn: Test
    condition: and(succeeded(), or(eq(dependencies.Build.outputs['Build.build.NBGV_PublicRelease'], 'True'), ${{ parameters.release_myget }}))
    jobs:
      - job:
        displayName: Release to pre-release/nightly MyGet feed
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            displayName: Download nupkg
            inputs:
              artifact: nupkg
              path: $(Build.ArtifactStagingDirectory)/nupkg
          - task: NuGetCommand@2
            displayName: NuGet push
            inputs:
              command: 'push'
              packagesToPush: $(Build.ArtifactStagingDirectory)/nupkg/*.nupkg
              nuGetFeedType: 'external'
              ${{ if eq(parameters.release_myget_nightly, true) }}:
                publishFeedCredentials: 'MyGet - Nightly'
              ${{ else }}:
                publishFeedCredentials: 'MyGet - Pre-releases'

  - stage: ReleaseNuGet
    displayName: NuGet release
    dependsOn: ReleaseMyGet
    condition: and(succeeded(), or(eq(dependencies.Build.outputs['Build.build.NBGV_PublicRelease'], 'True'), ${{ parameters.release_nuget }}))
    jobs:
      - job:
        displayName: Release to public NuGet feed
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            displayName: Download nupkg
            inputs:
              artifact: nupkg
              path: $(Build.ArtifactStagingDirectory)/nupkg
          - task: NuGetCommand@2
            displayName: NuGet push
            inputs:
              command: 'push'
              packagesToPush: $(Build.ArtifactStagingDirectory)/nupkg/*.nupkg
              nuGetFeedType: 'external'
              publishFeedCredentials: 'NuGet'
